# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-08-29T15:30:50+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Status1(Enum):
    success = "success"
    failure = "failure"


class Status(BaseModel):
    status: Status1


class TierInfo(BaseModel):
    name: str
    identifiers: List[str]
    started: Optional[AwareDatetime] = None
    children: List[str]


class ChildClsInfo(BaseModel):
    name: str
    idRegex: str
    namePartTemplate: str
    templates: List[str]
    metaNames: List[str]


class TreeChildResponse(BaseModel):
    name: str
    info: Optional[str] = None
    outcome: Optional[str] = None
    started: Optional[AwareDatetime] = None
    hltsPath: Optional[str] = None
    metaPath: Optional[str] = None
    notebookPath: Optional[str] = None
    additionalMeta: Optional[Dict[str, Any]] = None


class TreeResponse(TreeChildResponse):
    folder: str
    childClsInfo: Optional[ChildClsInfo] = None
    children: Dict[str, TreeChildResponse]
    name: str


class NewChildInfo(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    id: str
    parent: str
    template: Optional[str] = None
    description: str


class LookupGetParametersQuery(BaseModel):
    name: str


class TreeGetParametersQuery(BaseModel):
    ids__: Optional[List[str]] = Field(None, alias="ids[]")


class OpenGetParametersQuery(BaseModel):
    name: str
