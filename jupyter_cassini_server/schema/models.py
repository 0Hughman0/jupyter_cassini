# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-10-11T09:10:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel
from typing_extensions import Literal


class Status1(Enum):
    success = 'success'
    failure = 'failure'


class Status(BaseModel):
    status: Status1


class XCasField(Enum):
    private = 'private'
    core = 'core'


class CommonChildClsInfo(BaseModel):
    name: str
    idRegex: str
    namePartTemplate: str


class ChildClsFolderInfo(CommonChildClsInfo):
    tierType: Literal['folder']


class TreePathQuery(BaseModel):
    path: List[str]


class TreeChildResponse(BaseModel):
    name: str
    info: Optional[str] = None
    outcome: Optional[str] = None
    started: Optional[AwareDatetime] = None
    hltsPath: Optional[str] = None
    metaPath: Optional[str] = None
    notebookPath: Optional[str] = None
    additionalMeta: Optional[Dict[str, Any]] = None


class NewChildInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: str
    parent: str
    template: Optional[str] = None


class CassiniServerError(BaseModel):
    reason: str
    message: str


class LookupGetParametersQuery(BaseModel):
    name: str


class OpenGetParametersQuery(BaseModel):
    name: str


class Type(RootModel[str]):
    root: str


class CommonTierInfo(BaseModel):
    name: str
    ids: List[str]
    children: Optional[Dict[str, TreeChildResponse]] = None


class FolderTierInfo(CommonTierInfo):
    tierType: Literal['folder']


class ObjectDef1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    title: Optional[str] = None
    type: str
    default: Optional[Any] = None
    format: Optional[str] = None
    enum: Optional[List[Type]] = None
    x_cas_field: Optional[XCasField] = Field(None, alias='x-cas-field')
    field_ref: Optional[str] = Field(None, alias='$ref')


class ObjectDef2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    title: Optional[str] = None
    type: Optional[str] = None
    default: Optional[Any] = None
    format: Optional[str] = None
    enum: Optional[List[Type]] = None
    x_cas_field: Optional[XCasField] = Field(None, alias='x-cas-field')
    field_ref: str = Field(..., alias='$ref')


class ObjectDef3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    title: Optional[str] = None
    type: str
    default: Optional[Any] = None
    format: Optional[str] = None
    enum: List[Type]
    x_cas_field: Optional[XCasField] = Field(None, alias='x-cas-field')
    field_ref: Optional[str] = Field(None, alias='$ref')


class ObjectDef(RootModel[Union[ObjectDef1, ObjectDef2, ObjectDef3]]):
    root: Union[ObjectDef1, ObjectDef2, ObjectDef3]


class MetaSchema(BaseModel):
    properties: Dict[str, ObjectDef]
    additionalProperties: ObjectDef
    field_defs: Optional[Any] = Field(None, alias='$defs')
    type: Optional[str] = None


class ChildClsNotebookInfo(CommonChildClsInfo):
    templates: List[str]
    metaSchema: MetaSchema
    additionalMetaKeys: List[str]
    tierType: Literal['notebook']


class NotebookTierInfo(CommonTierInfo):
    started: AwareDatetime
    notebookPath: str
    metaPath: str
    hltsPath: Optional[str] = None
    metaSchema: MetaSchema
    tierType: Literal['notebook']


class ChildClsInfo(RootModel[Union[ChildClsFolderInfo, ChildClsNotebookInfo]]):
    root: Union[ChildClsFolderInfo, ChildClsNotebookInfo] = Field(
        ..., discriminator='tierType'
    )


class TreeResponse(TreeChildResponse):
    folder: str
    childClsInfo: Optional[ChildClsInfo] = None
    children: Dict[str, TreeChildResponse]
    name: str


class TierInfo(RootModel[Union[FolderTierInfo, NotebookTierInfo]]):
    root: Union[FolderTierInfo, NotebookTierInfo] = Field(..., discriminator='tierType')
